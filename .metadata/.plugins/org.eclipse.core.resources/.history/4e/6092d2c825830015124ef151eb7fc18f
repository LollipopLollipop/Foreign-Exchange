import java.io.IOException;
import java.util.Vector;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;


public class MRRandomForest {
	public static class TokenizerMapper
	extends Mapper<Object, Text, Text, IntWritable>{
	private final static IntWritable one = new IntWritable(1);
	private Text target = new Text();
	public void map(Object key, Text value, Context context) throws IOException, InterruptedException{
		String[] line = value.toString().split("\\t");
		
		if(line.length!=3)
			return;
		
		String[] labels = line[1].split(",");
		Vector<String> words = tokenizeDoc(line[2]);			
		for(String label:labels){
			target.set("Y=*");
			context.write(target, one);
			StringBuilder targetBuilder = new StringBuilder();
			targetBuilder.append("Y=");
			targetBuilder.append(label);
			target.set(targetBuilder.toString());
			context.write(target, one);
			for(String word:words){
				StringBuilder wordTargetBuilder = new StringBuilder(targetBuilder);
				wordTargetBuilder.append(",W=");
				wordTargetBuilder.append("*");
				
				target.set(wordTargetBuilder.toString());
				context.write(target, one);
				
				wordTargetBuilder.setLength(wordTargetBuilder.length()-1);
				wordTargetBuilder.append(word);
				target.set(wordTargetBuilder.toString());
				context.write(target, one);
			}
		}
	}
	
	static Vector<String> tokenizeDoc(String cur_doc) {
        String[] words = cur_doc.split("\\s+");
        Vector<String> tokens = new Vector<String>();
        for (int i = 0; i < words.length; i++) {
        	words[i] = words[i].replaceAll("\\W", "");
        	if (words[i].length() > 0) {
        		tokens.add(words[i]);
        	}
        } 
        return tokens;
	}
	
}

public static class IntSumReducer
	extends Reducer<Text, IntWritable, Text, IntWritable> {
	
	private IntWritable result = new IntWritable();
	public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException { 
			int sum = 0;
			for(IntWritable val: values){
				sum += val.get();
			}
			result.set(sum);
			context.write(key, result);
	}
}

public static class IntSumCombiner 
	extends Reducer<Text, IntWritable, Text, IntWritable> {
	public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException { 
		int sum = 0;
		for(IntWritable val: values){
			sum += val.get();
		}
		context.write(key, new IntWritable(sum));
	}

	
}
}
