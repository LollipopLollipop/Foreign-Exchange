import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
/**
 * 
 * @author ding
 * Main workflow of HW4: 
 * load prep-ed data from csv to Cassandra (can be skipped next time)
 * load training dataset from Cassandra
 * build the random forest based on training set
 * classify testing set, analyze predicted accuracy and store result into Cassandra
 */

public class HW4 {

	public static void main(String[] args) {
		
		try {
			//use buffered reader and writer for fast IO
			BufferedReader br = new BufferedReader(new FileReader(args[0]));
			BufferedWriter bw = new BufferedWriter(new FileWriter(args[1]));

			String thisLine = null;
			ArrayList<CandleStick> totalInstances = new ArrayList<CandleStick>();
			//int count = 0;
			while ((thisLine = br.readLine()) != null) {
				StringTokenizer featureTokenizer = new StringTokenizer(thisLine, ",");
				String[] featuresNLabel = new String[6];
				int i=0;
				while(featureTokenizer.hasMoreTokens()){
					featuresNLabel[i++] = featureTokenizer.nextToken();
				}
				//wrap each record into CandleStick obj
				CandleStick cs = new CandleStick(featuresNLabel);
				totalInstances.add(cs);
				//count ++;
			}
			
		// TODO Auto-generated method stub
		Cluster cluster;
		Session session;
		
		// Connect to the cluster and keyspace "demo"
		cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
		session = cluster.connect("dev");
		
		
		// Insert one record into the users table
		session.execute("insert into emp (empid, emp_first, emp_last, emp_dept) values (2,'jodie','smith','eng')");
		
		// Use select to get the user we just entered
		ResultSet results = session.execute("SELECT * FROM emp");
		for (Row row : results) {
			System.out.format("%s %s\n", row.getString("emp_first"), row.getString("emp_last"));
		}
		
		// Clean up the connection by closing it
		cluster.close();
		
	}

}
