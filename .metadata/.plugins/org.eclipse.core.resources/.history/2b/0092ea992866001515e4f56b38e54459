import java.io.*;
import java.util.*;

public class DecisionTree {
	private DTNode root;
	//private HashSet<String> attributes = new HashSet<String>();
	//4 features
	private boolean[] used = new boolean[4];
	
	public DecisionTree(ArrayList<CandleStick> allTrainingInstances){
		this.root.addInstances(allTrainingInstances);
		//this.attributes = new HashSet<String>(allTrainingInstances.get(0).getFeatures());
	}
	public void train(){
		buildDTree(this.root);
	}
	
	private DTNode buildDTree(DTNode curRoot){
		//leaf node
		if(curRoot.setEntropy()==0)
			return curRoot;
		
		int bestAttr = -1;
		double bestIG = Double.MIN_VALUE;
		//ArrayList<CandleStick> instances = new ArrayList<CandleStick>(curRoot.getInstances());
		ArrayList<CandleStick> leftInstances = new ArrayList<CandleStick>();
		ArrayList<CandleStick> rightInstances = new ArrayList<CandleStick>();
		
		//loop through attributes to find the best split
		for(int i=0; i<4; i++){
			//skip if current attribute already used in upper level
			if(used[i])
				continue;
		
			if(i==0){
				curRoot.getInstances().sort(CandleStick.CandleStickTimeComparator);
				
//				ArrayList<String> vals = new ArrayList<String>();
//				for(CandleStick ins : curRoot.getInstances()){
//					vals.add((String)ins.getFeatureVal(attribute));
//				}
				
//				Collections.sort(vals);
//				String threshold = vals.get(vals.size()/2);
			}else if(i==1){
				curRoot.getInstances().sort(CandleStick.CandleStickHighPriceComparator);
			}else if(i==2){
				curRoot.getInstances().sort(CandleStick.CandleStickLowPriceComparator);
			}else if(i==3){
				curRoot.getInstances().sort(CandleStick.CandleStickClosePriceComparator);
			}
			
			CandleStick threshold = curRoot.getInstances().get(curRoot.getInstancesSize()/2);
			ArrayList<CandleStick> left = (ArrayList<CandleStick>) curRoot.getInstances().subList(0, curRoot.getInstancesSize()/2);
			ArrayList<CandleStick> right = (ArrayList<CandleStick>) curRoot.getInstances().subList(curRoot.getInstancesSize()/2, curRoot.getInstancesSize());
//			for(CandleStick ins : curRoot.getInstances()){
//				if(belongToRight(i, ins, threshold))
//					right.add(ins);
//				else
//					left.add(ins);
//			}
			
			double leftEntropy = calcEntropy(left);
			double rightEntropy = calcEntropy(right);
			double infoGain = curRoot.getEntropy() - 
					((double)left.size()/curRoot.getInstancesSize())*leftEntropy - 
					((double)right.size()/curRoot.getInstancesSize())*rightEntropy;
			if(infoGain>bestIG){
				bestIG = infoGain;
				bestAttr = i;
				leftInstances = left;
				rightInstances = right;
			}
		}
		
		used[bestAttr] = true;
		curRoot.setTestCondition(bestAttr);
		DTNode leftBranch = new DTNode();
		leftBranch.addInstances(leftInstances);
		DTNode rightBranch = new DTNode();
		rightBranch.addInstances(rightInstances);
		curRoot.setLeft(new DTNode());
		curRoot.setRight(new DTNode());
		
		buildDTree(curRoot.left);
		buildDTree(curRoot.right);
		used[bestAttr] = false;
		return curRoot;
	}
	
	public String toString(){
		if(root==null)
			return "null";
		else{
			return root.toString();
		}
		
	}
	
	private void inOrder(DTNode curRoot)
	{
	 
	  if(curRoot==null) return;
	  
	  inOrder(curRoot.left);
	  
	  root.printNodeValue();
	  
	  inOrder( root.rightNode() ); 
	  
	}
	
//	private boolean belongToRight(String attribute, CandleStick ins,
//			CandleStick threshold) {
//		if(attribute.equals("time")){
//			if(ins.getTime().compareTo(threshold.getTime())>=0)
//				return true;
//			else
//				return false;
//		}else{
//			if(ins.getPrice(attribute)>=threshold.getPrice(attribute))
//				return true;
//			else
//				return false;
//		}
//		
//	}

	public class DTNode{
		private ArrayList<CandleStick> instances;
		private double entropy;
		private DTNode left;
		private DTNode right;
		private int testCond;
		
		public DTNode(){
			
		}
		public int getInstancesSize() {
			// TODO Auto-generated method stub
			return this.instances.size();
		}
		public ArrayList<CandleStick> getInstances() {
			// TODO Auto-generated method stub
			return this.instances;
		}
		private void addInstances(ArrayList<CandleStick> instances){
			this.instances = instances;
		}
		private double setEntropy(){
			this.entropy = calcEntropy(this.instances);
			return this.entropy;
		}
		private double getEntropy(){
			return this.entropy;
		}
		private void setLeft(DTNode n){
			this.left = n;
		}
		private void setRight(DTNode n){
			this.right = n;
		}
		private DTNode getLeft(){
			this.left = n;
		}
		private void setRight(DTNode n){
			this.right = n;
		}
		private void setTestCondition(int c){
			System.out.println("set test cond as " + c);
			this.testCond = c;
		}
		public String toString(){
			return "test cond " + this.testCond + " with " + instances.size() + " instances";
		}
	}
	
	private double calcEntropy(ArrayList<CandleStick> sampleInstances){
		int n = sampleInstances.size();
		int riseCount = 0;
		int dropCount = 0;
		int constantCount = 0;
		for(CandleStick instance : sampleInstances){
			if(instance.getLabel()==1)
				riseCount++;
			else if(instance.getLabel()==-1)
				dropCount++;
			else
				constantCount++;
		}
		double riseProb = ((double)riseCount)/n;
		double dropProb = ((double)dropCount)/n;
		double constantProb = ((double)constantCount)/n;
		
		double entropy = -riseProb*Math.log(riseProb)-dropProb*Math.log(dropProb)
				-constantProb*Math.log(constantProb);
		return entropy;
	}

	
//	public Node buildTree(ArrayList<Record> records, Node root, LearningSet learningSet) {
//		int bestAttribute = -1;
//		double bestGain = 0;
//		root.setEntropy(Entropy.calculateEntropy(root.getData()));
//		
//		if(root.getEntropy() == 0) {
//			return root;
//		}
//		
//		for(int i = 0; i < Hw1.NUM_ATTRS - 2; i++) {
//			if(!Hw1.isAttributeUsed(i)) {
//				double entropy = 0;
//				ArrayList<Double> entropies = new ArrayList<Double>();
//				ArrayList<Integer> setSizes = new ArrayList<Integer>();
//				
//				for(int j = 0; j < Hw1.NUM_ATTRS - 2; j++) {
//					ArrayList<Record> subset = subset(root, i, j);
//					setSizes.add(subset.size());
//					
//					if(subset.size() != 0) {
//						entropy = Entropy.calculateEntropy(subset);
//						entropies.add(entropy);
//					}
//				}
//				
//				double gain = Entropy.calculateGain(root.getEntropy(), entropies, setSizes, root.getData().size());
//				
//				if(gain > bestGain) {
//					bestAttribute = i;
//					bestGain = gain;
//				}
//			}
//		}
	
//		if(bestAttribute != -1) {
//			int setSize = Hw1.setSize(Hw1.attrMap.get(bestAttribute));
//			root.setTestAttribute(new DiscreteAttribute(Hw1.attrMap.get(bestAttribute), 0));
//			root.children = new Node[setSize];
//			root.setUsed(true);
//			Hw1.usedAttributes.add(bestAttribute);
//			
//			for (int j = 0; j< setSize; j++) {
//				root.children[j] = new Node();
//				root.children[j].setParent(root);
//				root.children[j].setData(subset(root, bestAttribute, j));
//				root.children[j].getTestAttribute().setName(Hw1.getLeafNames(bestAttribute, j));
//				root.children[j].getTestAttribute().setValue(j);
//			}
//
//			for (int j = 0; j < setSize; j++) {
//				buildTree(root.children[j].getData(), root.children[j], learningSet);
//			}
//
//			root.setData(null);
//		}
//		else {
//			return root;
//		}
//		
//		return root;
//	}
//	
//	public ArrayList<Record> subset(Node root, int attr, int value) {
//		ArrayList<Record> subset = new ArrayList<Record>();
//		
//		for(int i = 0; i < root.getData().size(); i++) {
//			Record record = root.getData().get(i);
//			
//			if(record.getAttributes().get(attr).getValue() == value) {
//				subset.add(record);
//			}
//		}
//		return subset;
//	}
//	
//	public double calculateSurrogates(ArrayList<Record> records) {
//		return 0;
//	}
}
